To convert all commands to hybrid commands, follow these steps for each cog:

1. Import required modules at the top of each cog:
```python
from discord import app_commands
```

2. Convert each command to a hybrid command by:
   - Replacing @commands.command() with @commands.hybrid_command()
   - Adding description parameter for slash command display
   - Adding app_commands.describe() for parameter descriptions

Example conversion:
```python
# Before:
@commands.command(name='example')
async def example_command(self, ctx, param1: str):
    await ctx.send(f"Example: {param1}")

# After:
@commands.hybrid_command(name='example', description='Example command description')
@app_commands.describe(param1='Description of param1')
async def example_command(self, ctx, param1: str):
    await ctx.send(f"Example: {param1}")
```

3. For commands with optional parameters:
```python
@commands.hybrid_command(name='command', description='Command description')
@app_commands.describe(
    param1='Description of required param',
    param2='Description of optional param'
)
async def command(self, ctx, param1: str, param2: str = None):
    if param2 is None:
        param2 = "default value"
    await ctx.send(f"{param1} {param2}")
```

4. For commands with complex types:
- Use discord.Member for user mentions
- Use discord.TextChannel for channel mentions
- Use discord.Role for role mentions
- Use int for numbers
- Use str for text

5. Sync commands after changes:
- Bot will automatically sync commands on startup
- Use !sync or /sync command to manually sync (admin only)

Remember:
- Keep command names consistent between prefix and slash versions
- Add meaningful descriptions for all parameters
- Test both prefix and slash versions after conversion
- Use proper type hints for parameters

Study commands example notes:
- Use `@commands.hybrid_command()` for commands like `focus`, `log`, `streak`, `leaderboard`, `doubt`, and `motivate` so both prefix and slash variants work.
- For `/motivate`, the cog attempts to call the existing Gemini cog (`cogs/gemini_reply.py`) if loaded; ensure `GEMINI_API_KEY` and `GEMINI_MODEL` are set in `.env` to enable AI replies.

Important: this project uses Gemini API integration via the existing `cogs/gemini_reply.py` and `cogs/gemini_config.py`. Do NOT add OpenAI API keys or OpenAI-specific code â€” keep AI calls routed to the Gemini cog. If you need to adapt prompts or behaviour, update the Gemini cog only.

Additionally consider making the following study features hybrid commands:
- `focusroom` (voice channel guard)
- `partner` (study partner mode)
- `remind` / `remindme` (scheduler)
- `progress` (update/view progress per subject)